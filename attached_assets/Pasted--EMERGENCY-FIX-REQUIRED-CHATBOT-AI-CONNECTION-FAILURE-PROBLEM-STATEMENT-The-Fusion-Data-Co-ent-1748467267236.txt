# EMERGENCY FIX REQUIRED: CHATBOT AI CONNECTION FAILURE

## PROBLEM STATEMENT
The Fusion Data Co enterprise chatbot is completely broken. The frontend works perfectly, but the AI backend is stuck returning the same fallback response because the OpenRouter API call is failing with "require is not defined" error.

## EXACT FILES TO FIX

### FILE 1: `server/routes.ts` (Lines 73-115)
**CURRENT BROKEN CODE:**
```typescript
// Around line 73-115 - THIS IS BROKEN
try {
  // OpenRouter API call section - FAILING HERE
  const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
    model: "perplexity/llama-3.1-sonar-large-128k-online",
    // ... rest of config
  });
} catch (error) {
  // Always falls back to this generic shit
  botResponse = "I'd love to help you explore...";
}
```

**REQUIRED FIX:**
Replace the broken OpenRouter API call section with this EXACT working code:

```typescript
try {
  // Build conversation history for context
  const conversationHistory = [
    {
      role: "system",
      content: `You are an enterprise sales assistant for Fusion Data Co, following the Sandler Sales methodology. 

COMPANY BACKGROUND:
- Fusion Data Co: $100M+ lead generation and workflow automation company
- Leadership: Robert Yeager (CEO) and Mat (Partner) 
- Specialties: AI-powered lead generation, sales automation, CRM optimization

SANDLER METHODOLOGY - FOLLOW THIS EXACTLY:
1. PAIN FUNNEL: Ask probing questions to uncover business pain points
2. BUDGET QUALIFICATION: Determine financial capacity (minimum $5K/month marketing spend)
3. DECISION MAKER: Identify who makes technology decisions
4. TIMELINE: Understand urgency and implementation timeline
5. PRESENT SOLUTIONS: Only after qualifying pain, budget, decision authority

CONVERSATION FLOW:
- Start by understanding their current lead generation challenges
- Ask about monthly lead volume, conversion rates, biggest bottlenecks
- Qualify budget range before presenting solutions
- Connect qualified prospects to Robert/Mat for strategy calls

Keep responses conversational, consultative, and value-focused.`
    }
  ];

  // Add conversation history from database
  if (conversationHistoryFromDB && conversationHistoryFromDB.length > 0) {
    conversationHistoryFromDB.forEach((msg: any) => {
      conversationHistory.push({
        role: msg.sender === 'user' ? 'user' : 'assistant',
        content: msg.message
      });
    });
  }

  // Add current user message
  conversationHistory.push({
    role: "user",
    content: userMessage
  });

  // Make OpenRouter API call
  const aiResponse = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
    model: "perplexity/llama-3.1-sonar-large-128k-online",
    messages: conversationHistory,
    temperature: 0.8,
    max_tokens: 1000,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0
  }, {
    headers: {
      'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://fusiondataco.com',
      'X-Title': 'Fusion Data Co Enterprise Assistant'
    }
  });

  // Extract AI response
  if (aiResponse.data && aiResponse.data.choices && aiResponse.data.choices[0]) {
    botResponse = aiResponse.data.choices[0].message.content;
  } else {
    throw new Error('Invalid API response format');
  }

} catch (error) {
  console.error('OpenRouter API Error:', error.response?.data || error.message);
  // Only fallback if API completely fails
  botResponse = "I'm experiencing a temporary connection issue. Let me connect you directly with our team. What's the best way to reach you for a quick strategy call about your lead generation goals?";
}
```

### FILE 2: `server/.env` 
**VERIFY THIS EXISTS:**
```
OPENROUTER_API_KEY=sk-or-v1-your-actual-api-key-here
```

## CRITICAL REQUIREMENTS

1. **DO NOT CHANGE THE FRONTEND** - The ChatBot.tsx component is perfect as-is
2. **DO NOT CHANGE THE STYLING** - The UI/UX is exactly what we want
3. **ONLY FIX THE API CALL** - Replace the broken OpenRouter section with working code above
4. **TEST THE CONNECTION** - Make sure the API actually calls Perplexity through OpenRouter
5. **MAINTAIN DATABASE STORAGE** - Keep saving messages to the database

## EXPECTED BEHAVIOR AFTER FIX

**BEFORE (BROKEN):**
User: "I need help with lead generation"
Bot: "I'd love to help you explore..." (same generic response every time)

**AFTER (FIXED):**
User: "I need help with lead generation"  
Bot: "I'd be happy to help you optimize your lead generation. What's your current monthly lead volume, and what's the biggest bottleneck you're facing - is it lead capture, nurturing, or conversion rates? Understanding your specific challenges will help me recommend the right solutions."

## VERIFICATION STEPS
1. Replace the broken OpenRouter code with the working version above
2. Ensure the API key is properly loaded from environment variables
3. Test with a real user message
4. Verify the response comes from Perplexity AI, not the fallback
5. Check that conversation history is maintained across messages

## WHAT NOT TO TOUCH
- Don't modify `client/src/components/ChatBot.tsx` 
- Don't change any styling or CSS
- Don't alter the database schema
- Don't modify the frontend API call structure

**JUST FIX THE GODDAMN OPENROUTER API CALL IN ROUTES.TS AND MAKE IT WORK**